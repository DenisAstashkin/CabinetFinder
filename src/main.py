import telebot
from telebot import types
from graph import *
from key_value_table import get_from_idTable
from media_storage import get_file
from config import BOT_TOKEN, PANORAMA_IMAGE_BUCKET, PANNELUM_URL, PANNELUM_PORT

bot = telebot.TeleBot('8019413008:AAHBCfXzc3xmrkFuabsFSLJSxforsILkjlA')

buttons_main = [
    "üîé –ù–∞–π—Ç–∏ –¥–æ—Ä–æ–≥—É",
    "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    
]

points = {}

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
for button in buttons_main:
    markup.add(types.KeyboardButton(button))

@bot.message_handler(func=lambda message: message.text == "üîé –ù–∞–π—Ç–∏ –¥–æ—Ä–æ–≥—É")
def search(message):
    if message.chat.id in points:
        del points[message.chat.id]
    bot.send_message(message.chat.id, "‚úÖ –û–∫–æ–ª–æ –∫–∞–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å ?", reply_markup=markup)
    bot.register_next_step_handler(message, get_start)

def get_start(message):
    points[message.chat.id] = {'start': message.text}
    bot.send_message(message.chat.id, "üíØ –í –∫–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç—ã –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å ?", reply_markup=markup)
    bot.register_next_step_handler(message, get_end)

def get_end(message):
    points[message.chat.id]['end'] = message.text
    try:
        nodes = get_path_between_nodes(get_from_idTable(points[message.chat.id]['start']), get_from_idTable(points[message.chat.id]['end']))
        bot.send_message(message.from_user.id, "–ü—É—Ç—å:", reply_markup=markup)
    except:
        print("Cannot return the path")
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞(Code 562). –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ id –∏–ª–∏ –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=markup)
        if message.chat.id in points:
            del points[message.chat.id]
        return

    for node in nodes:
        name = ""
        
        try:
            panorama_image_filename = node._properties["panorama_image"]
        except KeyError:
            panorama_image_filename = "3b6e95e3a1b9f54c7b1367c2e7863e2c.jpg" #default panorama

    

        #panorama_url = "PANNELLUME_SERVICE" + "BUCKET_URL" + panorama_image_filename
        image_url = "google.com" + "/" + PANORAMA_IMAGE_BUCKET + '/' + panorama_image_filename
        panorama_url = PANNELUM_URL + ":" + PANNELUM_PORT + "/src/standalone/pannellum.htm#panorama=" + image_url

        button_foo = types.InlineKeyboardButton('–ü–∞–Ω–æ—Ä–∞–º–∞', callback_data='foo', url = panorama_url)

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(button_foo)

        try:
            name = node._properties["name"]
        except KeyError:
            pass
        
        local_filename = get_file(node._properties["image"])
        
        bot.send_photo(message.chat.id, photo=open(local_filename, 'rb'), caption=name, reply_markup = keyboard)
    if message.chat.id in points:
        del points[message.chat.id]

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def docs(message):
    logo = open('./assets/logo.jpg', 'rb')
    bot.send_photo(message.chat.id, photo=logo, caption='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±–µ <strong>–¥–æ—Ä–æ–≥—É –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏!</strong>\n–î–∞–≤–∞–π –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.', parse_mode='HTML')
    bot.send_message(message.chat.id, f'–£ –í–∞—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –µ—Å—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏:\n\n<strong>{buttons_main[0]}</strong> ‚¨ÖÔ∏è –°–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞, –Ω–æ –æ–± —ç—Ç–æ –ø–æ–ø–æ–∑–∂–µ.\n\n<strong>{buttons_main[1]}</strong> ‚¨ÖÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –í–∞–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –¢–∞–∫–∂–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.', parse_mode='HTML')
    bot.send_message(message.chat.id, f'<strong>{buttons_main[0]}</strong>\n–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é, –æ–∫–æ–ª–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n\n–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <strong>–ù–û–ú–ï–† –ê–£–î–ò–¢–û–†–ò–ò / –õ–ï–°–¢–ù–ò–¶–£</strong> —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä–æ–π –í—ã —Å—Ç–æ–∏—Ç–µ.\n\n–ó–∞—Ç–µ–º –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å.\n\n–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <strong>–ù–û–ú–ï–†</strong> –∞—É–¥–∏—Ç–æ—Ä–∏–∏–∏, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å.\n\nüó∫ –ó–∞—Ç–µ–º –±–æ—Ç –≤—ã—à–ª–µ—Ç –í–∞–º –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–π –í–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏.', parse_mode='HTML')
    
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ–±—è –¥–æ –∫–∞–±–∏–Ω–µ—Ç–∞!", reply_markup=markup)
    docs(message)
    
@bot.message_handler(commands=['help'])
def start(message):
    docs(message)

bot.polling(none_stop=True, interval=0)